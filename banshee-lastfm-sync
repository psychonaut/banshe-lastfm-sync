#!/usr/bin/env perl

use utf8;
binmode STDOUT, ":utf8";

package Banshee::LastFm::Sync;

use Data::Dump;

use common::sense;
use Net::LastFMAPI;
use Data::Types qw(:int);
use DBI;
use Try::Tiny;
use Term::ProgressBar;
use File::Copy;
use Moose;


with 'MooseX::Getopt';

has key => ( is => "rw", isa => "Str", required => 1 );
has username => ( is => "rw", isa => "Str", required => 1 );
has db => ( is => "rw", isa => "Str", required => 1 );
has zero => ( is => "rw", isa => "Bool", required => 0, default => sub { 0 } );
has updateloved => ( is=> "rw", isa => "Bool", required => 0, default => sub { 0 });
has lovedrating => ( is => "rw", isa => "Int", required => 0, default => sub { 5 });
has _config => ( is => "rw", lazy_build => 1, required => 0 );
has debug => ( is => "rw", isa => "Bool", default => sub{ 0 }, accessor => "debug" );

__PACKAGE__->meta->make_immutable;
binmode STDOUT, ":utf8";

#
# builders
#
sub _build_config {
	my $self = shift;

	lastfm_config(
		api_key => $self->key,
		secret => $self->secret
	);
}

=item backup
	create backup of database
=cut
sub backup {
	my ( $self ) = @_;

	#
	# check if database file exists
	#
	unless( -f $self->db ) {
		say "Database file ${\$self->db} doesn't exists";
		exit(1);
	}

	#
	# just copy file with .backup postfix
	#
	my $backup = sprintf "%s.backup", $self->db;
	copy( $self->db, $backup );
	say "Creating backup $backup";
}

sub sync {
	my( $self ) = @_;

	#
	# independent counter
	#
	my $counter = 1;
	my $total   = 0;
	my $changed = 0;

	#
	# allow only rating from 1 to 5
	#
	unless ( $self->lovedrating >= 1 && $self->lovedrating <= 5 ) {
		say "Invalid rating '${\$self->lovedrating}'. A value from 1 to 5 is required.";
		exit(1);
	}

	#
	# only tracks with 0 playcount
	#
	my $zero  = "";
	$zero = "AND t.PlayCount = 0" if( $self->zero );

	#
	# check if database file exists
	#
	unless( -f $self->db ) {
		say "Database file ${\$self->db} doesn't exists";
		exit(1);
	}

	#
	# iterate on track
	#
	my $dbh = DBI->connect( sprintf("dbi:SQLite:dbname=%s", $self->db ) , "", "" );
	$dbh->{sqlite_unicode} = 1;

	#
	# count affected rows for progress bar, let me know if You know any other way
	#
	my $sth = $dbh->prepare( qq{
		SELECT
			count( * ) AS count
		FROM
			CoreTracks t,
			CoreArtists a,
			CorePrimarySources s
		WHERE
			t.ArtistID = a.ArtistID AND
			t.PrimarySourceID = s.PrimarySourceID AND
			s.StringID = 'MusicLibrarySource-Library'
			$zero
	} );
	$sth->execute;
	$total = $sth->fetchrow_hashref()->{ "count" };
	$sth->finish;

	say "Found $total tracks to process";
	#
	# real query
	#
	$sth = $dbh->prepare( qq{
		SELECT
			*,
			t.Rating AS TrackRating
		FROM
			CoreTracks t,
			CoreArtists a,
			CorePrimarySources s
		WHERE
			t.ArtistID = a.ArtistID AND
			t.PrimarySourceID = s.PrimarySourceID AND
			s.StringID = 'MusicLibrarySource-Library'
			$zero
		ORDER BY
			TrackID
	} );
	$sth->execute();

	#
	# get library tracks and parse them so that we can get play counts faster
	#
	say "Fetching Last.fm library..." if $self->debug;
	my $libResponse = undef;
	my $libCounter = 0;
	try {
		$libResponse = lastfm_iter(
			"library.getTracks",
			user => $self->username,
			limit => 250
		);
	};

	if ( !$libResponse ) {
		say "Error: Could not fetch Last.fm user library.";
		exit(1);
	}

	my $libProgress = Term::ProgressBar->new( { count => $Net::LastFMAPI::last_response->{"tracks"}->{"\@attr"}->{"total"}, name => "Fetching Last.fm library", ETA => "linear" } );

	my $libTracks = {};

	while ( my $libTrack = $libResponse->() ) {
		my $artist = $libTrack->{"artist"}->{"name"};
		my $track = $libTrack->{"name"};

		$libTracks->{lc $artist}->{lc $track}->{"playcount"} = $libTrack->{"playcount"};

		$libProgress->update($libCounter++);
	}

	#
	# Fetch loved tracks list
	#
	if ( $self->updateloved ) {
		say "Fetching Last.fm loved tracks..." if $self->debug;
		my $lovedResponse = undef;
		my $lovedCounter = 0;
		try {
			$lovedResponse = lastfm_iter(
				"user.getLovedTracks",
				user => $self->username,
				limit => 250
			);
		};

		if ( !$lovedResponse ) {
			say "Error: Could not fetch Last.fm loved tracks.";
			exit(1);
		}

		my $lovedProgress = Term::ProgressBar->new( { count => $Net::LastFMAPI::last_response->{"lovedtracks"}->{"\@attr"}->{"total"}, name => "Fetching Last.fm loved tracks", ETA => "linear" } );

		while ( my $libTrack = $lovedResponse->() ) {
			my $artist = $libTrack->{"artist"}->{"name"};
			my $track = $libTrack->{"name"};

			$libTracks->{lc $artist}->{lc $track}->{"loved"} = 1;

			$lovedProgress->update($lovedCounter++);
		}
	}

	my $progress = Term::ProgressBar->new( { count => $total, name => "checked", ETA => "linear" } );

	$dbh->do('BEGIN TRANSACTION');

	while( my $row = $sth->fetchrow_hashref ) {
		my $trackInfo = defined $row->{ "Name" } && defined $row->{ "Title" } ? 
			$libTracks->{ lc $row->{ "Name" } }->{ lc $row->{ "Title" }  } 
			: '';

		#
		# check if there is match
		#
		if( ref $trackInfo eq "HASH" ) {
			my $track_changed = 0;

			my $setFields = '';

			my $lastfm_count = $trackInfo->{ "playcount"};
			unless( is_int( $lastfm_count ) ) {
				$lastfm_count = 0;
			}
			
			my $lastfm_loved = $trackInfo->{ "loved"};
			unless ( is_int( $lastfm_loved) ) {
				$lastfm_loved = 0;
			}

			say "Found track $counter (${\$row->{TrackID}}) with ${ \$row->{ Name }}:${\$row->{ Title }}, play count: ${\$row->{ PlayCount}}, rating: ${\$row->{ TrackRating}}" if $self->debug;
			say "Last.fm match is ${\$row->{Name}}:${\$row->{Title}}, play count: $lastfm_count, loved: $lastfm_loved" if $self->debug;
			#
			# compare playcount
			#
			if( $row->{ "PlayCount"} < $lastfm_count ) {
				say "\tBanshee play count lower than last.fm play count: ${\$row->{ PlayCount}} < $lastfm_count" if $self->debug;
				#
				#
				#
				$setFields = $setFields . sprintf( ($setFields ? ", " : '') . "PlayCount = %d",
					$lastfm_count
				);
				$track_changed = 1;
			}


			#
			# add 5 stars for a loved track if rating not set
			#
			if ( $lastfm_loved eq 1 && $row->{ "TrackRating"} eq 0 ) {
				say "\tBanshee unrated song is loved" if $self->debug;
				$setFields = $setFields . sprintf( ($setFields ? ", " : '') . "Rating = %d",
					$self->lovedrating
				);
			}

			if ( $setFields ) {
				print "\tUpdating track... " if $self->debug;
				#
				#
				#
				$dbh->do( sprintf("UPDATE CoreTracks SET ${setFields} WHERE TrackID = %d",
					$row->{ "TrackID"}
				) );
				$track_changed = 1;
				say "done." if $self->debug;

			}

			if ( $track_changed eq 1 ) {
				$changed++;
			}

			say "done." if $self->debug;
		}
		$progress->update( $counter++ );
	}

	$dbh->do('COMMIT TRANSACTION');
	$dbh->disconnect();
	say "Updated $changed tracks of $total total tracks";
}

no Moose;
1;

package main;

use common::sense;
=pod cmndline

--key=b25b959554ed76058ac220b7b2e0a026 --username=<lastfm-username>

=cut

my $client = Banshee::LastFm::Sync->new_with_options();
$client->backup();
$client->sync;

1;
